#include "contact.h"

void Initcontact(struct Contact *ps)
{
    ps->data=(struct people*)malloc(default_sz*(sizeof(struct people)));
    if(ps->data ==NULL)
    {
        return;
    }
    ps->size=0;
    ps->capacity=default_sz;
}

void checkcapacity(struct Contact *ps)
{
    if(ps->size==ps->capacity)
    {
        struct people *ptr =realloc(ps->data,(ps->capacity+2)*sizeof(people));
        if(ptr!=NULL)
        {
            ps->data=ptr;
            printf("增容成功\n");
        }
        else
        {
            printf("增容失败\n");
        }
    }

}
void addcontact(struct Contact *ps)
{
    //检测容量
    //1.增加容量
    //2.不需要增加
    checkcapacity(ps);
    //添加数据
    printf("请输入名字:");
    scanf("%s",ps->data[ps->size].name);
    printf("请输入年龄:");
    scanf("%d",&(ps->data[ps->size].age));
    printf("请输入性别:");
    scanf("%s",ps->data[ps->size].sex);
    printf("请输入电话:");
    scanf("%s",ps->data[ps->size].tele);
    printf("请输入地址:");
    scanf("%s",ps->data[ps->size].addr);

    ps->size++;
    printf("添加成功");
}

void showcontact(struct Contact *ps)
{
    if(ps->size==0)
    {
        printf("通讯录为空\n");
    }
    else
    {
         int i =0;
         printf("%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n","名字","年龄","性别","电话","地址");
         for(i=0; i < ps->size; i++)
         {
             printf("%-20s\t%-4d\t%-5s\t%-12s\t%-20s\n",
                    ps->data[i].name,
                    ps->data[i].age,
                    ps->data[i].sex,
                    ps->data[i].tele,
                    ps->data[i].addr);

         }
    }
}

static int Findname(struct Contact*ps,char name[max_name])
{
    int i = 0;
    for(i=0;i<ps->size;i++)
    {
        if(0==strcmp(ps->data[i].name,name))
        {
            return i;
        }
    }
    return -1;
}

void delcontact(struct Contact *ps)
{
    char name[max_name];
    printf("请输入要删除的人的名字:");
    scanf("%s",name);
    //1.查找要删除的人的位置
    int ret=Findname(ps,name);
    //2.删除
    if(ret==-1)
    {
        printf("要删除的人不在");
    }
    else
    {
        int j = 0;
        for(j=ret;j<ps->size-1;j++)
        {
            ps->data[j]=ps->data[j+1];
        }
        ps->size--;
        printf("删除成功");
    }
}

void searchcontact(struct Contact *ps)
{
    char name[max_name];
    printf("请输入要查找的人的名字:");
    scanf("%s",name);
    int pos=Findname(ps,name);
    if(pos==-1)
    {
        printf("要查找的人不存在");
    }
    else
    {
         printf("%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n","名字","年龄","性别","电话","地址");
         printf("%-20s\t%-4d\t%-5s\t%-12s\t%-20s\n",
                ps->data[pos].name,
                ps->data[pos].age,
                ps->data[pos].sex,
                ps->data[pos].tele,
                ps->data[pos].addr);
    }
}

void modifycontact(struct Contact *ps)
{
    char name[max_name];
    printf("要修改的人的名字");
    scanf("%s",name);
    int pos = Findname(ps,name);
    if(pos==-1)
    {
        printf("没有找到要修改人的名字");
    }
    else
    {
        printf("请输入名字:");
        scanf("%s",ps->data[pos].name);
        printf("请输入年龄:");
        scanf("%d",&(ps->data[pos].age));
        printf("请输入性别:");
        scanf("%s",ps->data[pos].sex);
        printf("请输入电话:");
        scanf("%s",ps->data[pos].tele);
        printf("请输入地址:");
        scanf("%s",ps->data[pos].addr);

    }
}

void sortcontact(struct Contact *ps,int size)
{
    int i=0;
    for(i=0; i<size; i++)
    {
        int j = 0;
        for(j=0; j<size-1-i;j++)
        {
            if((ps->data[j].age>ps->data[j+1].age))
            {
                struct people tmp=ps->data[j+1];
                ps->data[j+1]=ps->data[j];
                ps->data[j]=tmp;

            }
        }
    }
}

void destorycontact(Contact*ps)
{
    free(ps->data);
    ps->data=NULL;
}
